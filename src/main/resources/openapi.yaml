openapi: 3.0.3
info:
  title: Todo API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /todos:
    get:
      operationId: listTodos
      summary: List todos
      parameters:
        - in: query
          name: page
          description: Zero-based page index (0..N)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: size
          description: The size of the page to be returned
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
        - in: query
          name: sort
          description: >
            Sorting by a property name. Use JSON:API style.
            If the provided property does not exist, the server falls
            back to `title` (ascending).
          required: false
          schema:
            type: string
            default: title
          examples:
            id-asc:
              value: id
              summary: Sort by id (ascending)
            id-desc:
              value: -id
              summary: Sort by id (descending)
            title-asc:
              value: title
              summary: Sort by title (ascending)
            title-desc:
              value: -title
              summary: Sort by title (descending)
            completed-asc:
              value: completed
              summary: Sort by completed (ascending)
            completed-desc:
              value: -completed
              summary: Sort by completed (descending)
        - in: query
          name: q
          description: Case-insensitive search term
          required: false
          schema:
            type: string
            minLength: 1
          example: groceries
      responses:
        '200':
          description: OK
          headers:
            X-Page:
              schema:
                type: integer
                minimum: 0
              description: Current page index
            X-Size:
              schema:
                type: integer
                minimum: 1
              description: Page size
            X-Total-Elements:
              schema:
                type: integer
                format: int64
              description: Total number of elements
            X-Total-Pages:
              schema:
                type: integer
                minimum: 0
              description: Total number of pages
            X-Sort:
              schema:
                type: string
              description: DTO field used for sorting after validation/fallback
            X-Sort-Dir:
              schema:
                type: string
                enum: [asc, desc]
              description: Sorting direction applied
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
    post:
      operationId: createTodo
      summary: Create todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
  /todos/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        example: 073c98bc-4fa0-4ede-b121-6be06c25977f

    get:
      operationId: getTodo
      summary: Get specific todo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Not Found
    put:
      operationId: updateTodo
      summary: Update specific todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Not Found
    patch:
      operationId: patchTodo
      summary: Patch specific todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoPatch'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Not Found
    delete:
      operationId: deleteTodo
      summary: Delete a specific todo
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
components:
  schemas:
    Todo:
      type: object
      required: [id, title, completed]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
        completed:
          type: boolean
    TodoCreate:
      type: object
      required: [title]
      properties:
        title:
          type: string
          minLength: 1
    TodoUpdate:
      type: object
      required: [title, completed]
      properties:
        title:
          type: string
          minLength: 1
        completed:
          type: boolean
    TodoPatch:
      type: object
      required: []
      properties:
        title:
          type: string
          minLength: 1
        completed:
          type: boolean
